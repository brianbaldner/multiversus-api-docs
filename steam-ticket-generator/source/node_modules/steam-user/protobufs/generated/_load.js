/* eslint-disable */
// Auto-generated by generate-protos script on Mon Feb 28 2022 16:49:13 GMT-0500 (Eastern Standard Time)

const Schema = module.exports;
const {Root} = require('protobufjs');

mergeObjects(Schema, Root.fromJSON(require('./clientmetrics.json')));
mergeObjects(Schema, Root.fromJSON(require('./common.json')));
mergeObjects(Schema, Root.fromJSON(require('./content_manifest.json')));
mergeObjects(Schema, Root.fromJSON(require('./encrypted_app_ticket.json')));
mergeObjects(Schema, Root.fromJSON(require('./enums.json')));
mergeObjects(Schema, Root.fromJSON(require('./enums_clientserver.json')));
mergeObjects(Schema, Root.fromJSON(require('./friends_mobile.json')));
mergeObjects(Schema, Root.fromJSON(require('./htmlmessages.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_accountlinking.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_accountprivacy.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_auction.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_broadcast.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_chat.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_chatroom.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_chatusability.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_clan.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_clanchatrooms.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_clanfaqs.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_clientmetrics.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_cloudconfigstore.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_community.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_econ.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_embedded.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_experimentservice.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_fovasvideo.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_friendmessages.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_friendslist.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_loyaltyrewards.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_news.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_parental.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_player.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_publishedfile.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_quest.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_saleitemrewards.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_steamtv.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_store.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_storebrowse.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_storequery.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_summersale2020.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_useraccount.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_usergameactivity.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_usernews.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_userreviews.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_video.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_voicechat.json')));
mergeObjects(Schema, Root.fromJSON(require('./service_webrtc.json')));
mergeObjects(Schema, Root.fromJSON(require('./steamdatagram_messages_auth.json')));
mergeObjects(Schema, Root.fromJSON(require('./steamdatagram_messages_sdr.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_accounthardware.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_appoverview.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_auth.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_base.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_broadcast.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_chat.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientlanp2p.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientmetrics.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientnotificationtypes.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_2.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_appinfo.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_friends.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_gameservers.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_lbs.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_login.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_mms.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_ucm.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_uds.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_ufs.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_clientserver_userstats.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_client_objects.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_cloud.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_contentsystem.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_credentials.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_datapublisher.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_depotbuilder.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_deviceauth.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_econ.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_friendmessages.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_gamenetworking.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_gamenetworkingui.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_gamenotifications.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_gameservers.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_hiddevices.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_inventory.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_linkfilter.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_lobbymatchmaking.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_market.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_offline.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_parental.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_parties.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_partnerapps.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_player.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_publishedfile.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_qms.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_remoteclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_remoteclient_discovery.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_remoteclient_service.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_remoteclient_service_messages.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_remoteplay.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_secrets.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_shader.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_sitelicenseclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_siteserverui.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_site_license.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_star.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_store.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_timedtrial.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_twofactor.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_unified_base.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_unified_test.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_useraccount.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_vac.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_video.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_virtualcontroller.json')));
mergeObjects(Schema, Root.fromJSON(require('./steammessages_workshop.steamclient.json')));
mergeObjects(Schema, Root.fromJSON(require('./steamnetworkingsockets_messages.json')));
mergeObjects(Schema, Root.fromJSON(require('./steamnetworkingsockets_messages_certs.json')));
mergeObjects(Schema, Root.fromJSON(require('./steamnetworkingsockets_messages_udp.json')));

function mergeObjects(destinationObject, sourceObject) {
	for (let i in sourceObject) {
		if (sourceObject.hasOwnProperty(i)) {
			destinationObject[i] = sourceObject[i];
		}
	}
}
