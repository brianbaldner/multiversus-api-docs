import "steammessages_unified_base.steamclient.proto";
import "common.proto";

message CPlayer_GetMutualFriendsForIncomingInvites_Request {
}

message CPlayer_GetMutualFriendsForIncomingInvites_Response {
	repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
}

message CPlayer_IncomingInviteMutualFriendList {
	optional fixed64 steamid = 1;
	repeated uint32 mutual_friend_account_ids = 2;
}

message CPlayer_GetOwnedGames_Response {
	optional uint32 game_count = 1;
	repeated .CPlayer_GetOwnedGames_Response_Game games = 2;
}

message CPlayer_GetOwnedGames_Response_Game {
	optional int32 appid = 1;
	optional string name = 2;
	optional int32 playtime_2weeks = 3;
	optional int32 playtime_forever = 4;
	optional string img_icon_url = 5;
	optional string img_logo_url = 6;
	optional bool has_community_visible_stats = 7;
	optional int32 playtime_windows_forever = 8;
	optional int32 playtime_mac_forever = 9;
	optional int32 playtime_linux_forever = 10;
}

message CPlayer_GetPlayNext_Response {
	optional uint32 last_update_time = 1;
	repeated uint32 appids = 2;
}

message CPlayer_GetFriendsGameplayInfo_Response {
	optional .CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo your_info = 1;
	repeated .CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo in_game = 2;
	repeated .CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo played_recently = 3;
	repeated .CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo played_ever = 4;
	repeated .CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo owns = 5;
	repeated .CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo in_wishlist = 6;
}

message CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
	optional fixed64 steamid = 1;
	optional uint32 minutes_played = 2;
	optional uint32 minutes_played_forever = 3;
	optional bool in_wishlist = 4;
	optional bool owned = 5;
}

message CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	optional fixed64 steamid = 1;
	optional uint32 minutes_played = 2;
	optional uint32 minutes_played_forever = 3;
}

message CPlayer_GetFriendsAppsActivity_Response {
	repeated .CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo trending = 1;
	repeated .CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo recent_purchases = 2;
	repeated .CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo unowned = 3;
	repeated .CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo popular = 4;
	repeated .CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo dont_forget = 5;
	repeated .CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo being_discussed = 6;
	repeated .CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo new_to_group = 7;
	repeated .CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo returned_to_group = 8;
	optional uint32 active_friend_count = 9 [default = 0];
}

message CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	optional uint32 appid = 1;
	repeated .CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime friends = 2;
	optional uint32 display_order = 3;
}

message CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime {
	optional fixed64 steamid = 1;
	optional uint32 minutes_played_this_week = 2;
	optional uint32 minutes_played_two_weeks = 3;
	optional uint32 minutes_played_forever = 4;
	optional uint32 event_count = 5;
}

message CPlayer_GetGameBadgeLevels_Response {
	optional uint32 player_level = 1;
	repeated .CPlayer_GetGameBadgeLevels_Response_Badge badges = 2;
}

message CPlayer_GetGameBadgeLevels_Response_Badge {
	optional int32 level = 1;
	optional int32 series = 2;
	optional uint32 border_color = 3;
}

message CPlayer_GetProfileBackground_Response {
	optional .ProfileItem profile_background = 1;
}

message ProfileItem {
	optional uint64 communityitemid = 1;
	optional string image_small = 2;
	optional string image_large = 3;
	optional string name = 4;
	optional string item_title = 5;
	optional string item_description = 6;
	optional uint32 appid = 7;
	optional uint32 item_type = 8;
	optional uint32 item_class = 9;
	optional string movie_webm = 10;
	optional string movie_mp4 = 11;
	optional string movie_webm_small = 13;
	optional string movie_mp4_small = 14;
	optional uint32 equipped_flags = 12;
}

message CPlayer_SetProfileBackground_Request {
	optional uint64 communityitemid = 1;
}

message CPlayer_SetProfileBackground_Response {
}

message CPlayer_GetMiniProfileBackground_Response {
	optional .ProfileItem profile_background = 1;
}

message CPlayer_SetMiniProfileBackground_Request {
	optional uint64 communityitemid = 1;
}

message CPlayer_SetMiniProfileBackground_Response {
}

message CPlayer_GetAvatarFrame_Response {
	optional .ProfileItem avatar_frame = 1;
}

message CPlayer_SetAvatarFrame_Request {
	optional uint64 communityitemid = 1;
}

message CPlayer_SetAvatarFrame_Response {
}

message CPlayer_GetAnimatedAvatar_Response {
	optional .ProfileItem avatar = 1;
}

message CPlayer_SetAnimatedAvatar_Request {
	optional uint64 communityitemid = 1;
}

message CPlayer_SetAnimatedAvatar_Response {
}

message CPlayer_GetProfileItemsOwned_Request {
	optional string language = 1;
}

message CPlayer_GetProfileItemsOwned_Response {
	repeated .ProfileItem profile_backgrounds = 1;
	repeated .ProfileItem mini_profile_backgrounds = 2;
	repeated .ProfileItem avatar_frames = 3;
	repeated .ProfileItem animated_avatars = 4;
	repeated .ProfileItem profile_modifiers = 5;
}

message CPlayer_GetProfileItemsEquipped_Request {
	optional fixed64 steamid = 1;
	optional string language = 2;
}

message CPlayer_GetProfileItemsEquipped_Response {
	optional .ProfileItem profile_background = 1;
	optional .ProfileItem mini_profile_background = 2;
	optional .ProfileItem avatar_frame = 3;
	optional .ProfileItem animated_avatar = 4;
	optional .ProfileItem profile_modifier = 5;
}

message CPlayer_SetEquippedProfileItemFlags_Request {
	optional uint64 communityitemid = 1;
	optional uint32 flags = 2;
}

message CPlayer_SetEquippedProfileItemFlags_Response {
}

message CPlayer_GetEmoticonList_Response {
	repeated .CPlayer_GetEmoticonList_Response_Emoticon emoticons = 1;
}

message CPlayer_GetEmoticonList_Response_Emoticon {
	optional string name = 1;
	optional int32 count = 2;
	optional uint32 time_last_used = 3;
	optional uint32 use_count = 4;
	optional uint32 time_received = 5;
	optional uint32 appid = 6;
}

message CPlayer_GetAchievementsProgress_Response {
	repeated .CPlayer_GetAchievementsProgress_Response_AchievementProgress achievement_progress = 1;
}

message CPlayer_GetAchievementsProgress_Response_AchievementProgress {
	optional uint32 appid = 1;
	optional uint32 unlocked = 2;
	optional uint32 total = 3;
	optional float percentage = 4;
	optional bool all_unlocked = 5;
	optional uint32 cache_time = 6;
}

message CPlayer_GetFavoriteBadge_Response {
	optional bool has_favorite_badge = 1;
	optional uint32 badgeid = 2;
	optional uint64 communityitemid = 3;
	optional uint32 item_type = 4;
	optional uint32 border_color = 5;
	optional uint32 appid = 6;
	optional uint32 level = 7;
}

message CPlayer_SetFavoriteBadge_Request {
	optional uint64 communityitemid = 1;
	optional uint32 badgeid = 2;
}

message CPlayer_SetFavoriteBadge_Response {
}

message CPlayer_GetProfileCustomization_Response {
	repeated .ProfileCustomization customizations = 1;
	optional uint32 slots_available = 2;
	optional .ProfileTheme profile_theme = 3;
	repeated .CPlayer_GetProfileCustomization_Response_PurchasedCustomization purchased_customizations = 4;
	optional .ProfilePreferences profile_preferences = 5;
}

message ProfileCustomization {
	optional int32 customization_type = 1 [(description) = "enum"];
	optional bool large = 2;
	repeated .ProfileCustomizationSlot slots = 3;
	optional bool active = 4;
	optional int32 customization_style = 5 [(description) = "enum"];
	optional uint64 purchaseid = 6;
	optional uint32 level = 7;
}

message ProfileCustomizationSlot {
	optional uint32 slot = 1;
	optional uint32 appid = 2;
	optional uint64 publishedfileid = 3;
	optional uint64 item_assetid = 4;
	optional uint64 item_contextid = 5;
	optional string notes = 6;
	optional string title = 7;
	optional uint32 accountid = 8;
	optional uint32 badgeid = 9;
	optional uint32 border_color = 10;
	optional uint64 item_classid = 11;
	optional uint64 item_instanceid = 12;
	optional int32 ban_check_result = 13 [(description) = "enum"];
}

message ProfileTheme {
	optional string theme_id = 1;
	optional string title = 2;
}

message CPlayer_GetProfileCustomization_Response_PurchasedCustomization {
	optional uint64 purchaseid = 1;
	optional int32 customization_type = 2 [(description) = "enum"];
	optional uint32 level = 3;
}

message ProfilePreferences {
	optional bool hide_profile_awards = 1;
}

message CPlayer_GetPurchasedProfileCustomizations_Response {
	repeated .CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization purchased_customizations = 1;
}

message CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization {
	optional uint64 purchaseid = 1;
	optional int32 customization_type = 2 [(description) = "enum"];
}

message CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
	optional fixed64 steamid = 1;
}

message CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
	repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization purchased_customizations = 1;
	repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization upgraded_customizations = 2;
}

message CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization {
	optional int32 customization_type = 1 [(description) = "enum"];
	optional uint32 count = 2;
}

message CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization {
	optional int32 customization_type = 1 [(description) = "enum"];
	optional uint32 level = 2;
}

message CPlayer_GetProfileThemesAvailable_Response {
	repeated .ProfileTheme profile_themes = 1;
}

message CPlayer_SetProfileTheme_Request {
	optional string theme_id = 1;
}

message CPlayer_SetProfileTheme_Response {
}

message CPlayer_SetProfilePreferences_Response {
}

message CPlayer_PostStatusToFriends_Request {
	optional uint32 appid = 1;
	optional string status_text = 2;
}

message CPlayer_PostStatusToFriends_Response {
}

message CPlayer_GetPostedStatus_Response {
	optional uint32 accountid = 1;
	optional uint64 postid = 2;
	optional string status_text = 3;
	optional bool deleted = 4;
	optional uint32 appid = 5;
}

message CPlayer_DeletePostedStatus_Response {
}

message CPlayer_GetLastPlayedTimes_Request {
	optional uint32 min_last_played = 1;
}

message CPlayer_GetLastPlayedTimes_Response {
	repeated .CPlayer_GetLastPlayedTimes_Response_Game games = 1;
}

message CPlayer_GetLastPlayedTimes_Response_Game {
	optional int32 appid = 1;
	optional uint32 last_playtime = 2;
	optional int32 playtime_2weeks = 3;
	optional int32 playtime_forever = 4;
	optional uint32 first_playtime = 5;
	optional int32 playtime_windows_forever = 6;
	optional int32 playtime_mac_forever = 7;
	optional int32 playtime_linux_forever = 8;
	optional uint32 first_windows_playtime = 9;
	optional uint32 first_mac_playtime = 10;
	optional uint32 first_linux_playtime = 11;
	optional uint32 last_windows_playtime = 12;
	optional uint32 last_mac_playtime = 13;
	optional uint32 last_linux_playtime = 14;
}

message CPlayer_AcceptSSA_Response {
}

message CPlayer_GetNicknameList_Response {
	repeated .CPlayer_GetNicknameList_Response_PlayerNickname nicknames = 1;
}

message CPlayer_GetNicknameList_Response_PlayerNickname {
	optional fixed32 accountid = 1;
	optional string nickname = 2;
}

message CPlayer_GetPerFriendPreferences_Request {
}

message CPlayer_GetPerFriendPreferences_Response {
	repeated .PerFriendPreferences preferences = 1;
}

message PerFriendPreferences {
	optional fixed32 accountid = 1;
	optional string nickname = 2;
	optional int32 notifications_showingame = 3 [(description) = "enum"];
	optional int32 notifications_showonline = 4 [(description) = "enum"];
	optional int32 notifications_showmessages = 5 [(description) = "enum"];
	optional int32 sounds_showingame = 6 [(description) = "enum"];
	optional int32 sounds_showonline = 7 [(description) = "enum"];
	optional int32 sounds_showmessages = 8 [(description) = "enum"];
	optional int32 notifications_sendmobile = 9 [(description) = "enum"];
}

message CPlayer_SetPerFriendPreferences_Request {
	optional .PerFriendPreferences preferences = 1;
}

message CPlayer_SetPerFriendPreferences_Response {
}

message CPlayer_AddFriend_Request {
	optional fixed64 steamid = 1;
}

message CPlayer_AddFriend_Response {
	optional bool invite_sent = 1;
	optional uint32 friend_relationship = 2;
	optional int32 result = 3;
}

message CPlayer_RemoveFriend_Request {
	optional fixed64 steamid = 1;
}

message CPlayer_RemoveFriend_Response {
	optional uint32 friend_relationship = 1;
}

message CPlayer_IgnoreFriend_Request {
	optional fixed64 steamid = 1;
	optional bool unignore = 2;
}

message CPlayer_IgnoreFriend_Response {
	optional uint32 friend_relationship = 1;
}

message CPlayer_GetCommunityPreferences_Request {
}

message CPlayer_GetCommunityPreferences_Response {
	optional .CPlayer_CommunityPreferences preferences = 1;
}

message CPlayer_CommunityPreferences {
	optional bool hide_adult_content_violence = 1 [default = true];
	optional bool hide_adult_content_sex = 2 [default = true];
	optional bool parenthesize_nicknames = 4 [default = false];
	optional int32 text_filter_setting = 5 [(description) = "enum"];
	optional bool text_filter_ignore_friends = 6 [default = true];
	optional uint32 text_filter_words_revision = 7;
	optional uint32 timestamp_updated = 3;
}

message CPlayer_SetCommunityPreferences_Request {
	optional .CPlayer_CommunityPreferences preferences = 1;
}

message CPlayer_SetCommunityPreferences_Response {
}

message CPlayer_GetTextFilterWords_Request {
}

message CPlayer_GetTextFilterWords_Response {
	optional .CPlayer_TextFilterWords words = 1;
}

message CPlayer_TextFilterWords {
	repeated string text_filter_custom_banned_words = 1;
	repeated string text_filter_custom_clean_words = 2;
	optional uint32 text_filter_words_revision = 3;
}

message CPlayer_GetNewSteamAnnouncementState_Response {
	optional int32 state = 1;
	optional string announcement_headline = 2;
	optional string announcement_url = 3;
	optional uint32 time_posted = 4;
	optional uint64 announcement_gid = 5;
}

message CPlayer_UpdateSteamAnnouncementLastRead_Response {
}

message CPlayer_GetPrivacySettings_Request {
}

message CPlayer_GetPrivacySettings_Response {
	optional .CPrivacySettings privacy_settings = 1;
}

message CPrivacySettings {
	optional int32 privacy_state = 1;
	optional int32 privacy_state_inventory = 2;
	optional int32 privacy_state_gifts = 3;
	optional int32 privacy_state_ownedgames = 4;
	optional int32 privacy_state_playtime = 5;
	optional int32 privacy_state_friendslist = 6;
}

message CPlayer_GetDurationControl_Response {
	optional bool is_enabled = 1;
	optional int32 seconds = 2;
	optional int32 seconds_today = 3;
	optional bool is_steamchina_account = 4;
	optional bool is_age_verified = 5;
	optional uint32 seconds_allowed_today = 6;
}

message CPlayer_LastPlayedTimes_Notification {
	repeated .CPlayer_GetLastPlayedTimes_Response_Game games = 1;
}

message CPlayer_FriendNicknameChanged_Notification {
	optional fixed32 accountid = 1;
	optional string nickname = 2;
	optional bool is_echo_to_self = 3;
}

message CPlayer_FriendEquippedProfileItemsChanged_Notification {
	optional fixed32 accountid = 1;
}

message CPlayer_NewSteamAnnouncementState_Notification {
	optional int32 state = 1;
	optional string announcement_headline = 2;
	optional string announcement_url = 3;
	optional uint32 time_posted = 4;
	optional uint64 announcement_gid = 5;
}

message CPlayer_CommunityPreferencesChanged_Notification {
	optional .CPlayer_CommunityPreferences preferences = 1;
}

message CPlayer_TextFilterWordsChanged_Notification {
	optional .CPlayer_TextFilterWords words = 1;
}

message CPlayer_PerFriendPreferencesChanged_Notification {
	optional fixed32 accountid = 1;
	optional .PerFriendPreferences preferences = 2;
}

message CPlayer_PrivacySettingsChanged_Notification {
	optional .CPrivacySettings privacy_settings = 1;
}

service Player {
	rpc GetMutualFriendsForIncomingInvites (.CPlayer_GetMutualFriendsForIncomingInvites_Request) returns (.CPlayer_GetMutualFriendsForIncomingInvites_Response);
	rpc GetOwnedGames (.NotImplemented) returns (.CPlayer_GetOwnedGames_Response);
	rpc GetPlayNext (.NotImplemented) returns (.CPlayer_GetPlayNext_Response);
	rpc GetFriendsGameplayInfo (.NotImplemented) returns (.CPlayer_GetFriendsGameplayInfo_Response);
	rpc GetFriendsAppsActivity (.NotImplemented) returns (.CPlayer_GetFriendsAppsActivity_Response);
	rpc GetGameBadgeLevels (.NotImplemented) returns (.CPlayer_GetGameBadgeLevels_Response);
	rpc GetProfileBackground (.NotImplemented) returns (.CPlayer_GetProfileBackground_Response);
	rpc SetProfileBackground (.CPlayer_SetProfileBackground_Request) returns (.CPlayer_SetProfileBackground_Response);
	rpc GetMiniProfileBackground (.NotImplemented) returns (.CPlayer_GetMiniProfileBackground_Response);
	rpc SetMiniProfileBackground (.CPlayer_SetMiniProfileBackground_Request) returns (.CPlayer_SetMiniProfileBackground_Response);
	rpc GetAvatarFrame (.NotImplemented) returns (.CPlayer_GetAvatarFrame_Response);
	rpc SetAvatarFrame (.CPlayer_SetAvatarFrame_Request) returns (.CPlayer_SetAvatarFrame_Response);
	rpc GetAnimatedAvatar (.NotImplemented) returns (.CPlayer_GetAnimatedAvatar_Response);
	rpc SetAnimatedAvatar (.CPlayer_SetAnimatedAvatar_Request) returns (.CPlayer_SetAnimatedAvatar_Response);
	rpc GetProfileItemsOwned (.CPlayer_GetProfileItemsOwned_Request) returns (.CPlayer_GetProfileItemsOwned_Response);
	rpc GetProfileItemsEquipped (.CPlayer_GetProfileItemsEquipped_Request) returns (.CPlayer_GetProfileItemsEquipped_Response);
	rpc SetEquippedProfileItemFlags (.CPlayer_SetEquippedProfileItemFlags_Request) returns (.CPlayer_SetEquippedProfileItemFlags_Response);
	rpc GetEmoticonList (.NotImplemented) returns (.CPlayer_GetEmoticonList_Response);
	rpc GetAchievementsProgress (.NotImplemented) returns (.CPlayer_GetAchievementsProgress_Response);
	rpc GetFavoriteBadge (.NotImplemented) returns (.CPlayer_GetFavoriteBadge_Response);
	rpc SetFavoriteBadge (.CPlayer_SetFavoriteBadge_Request) returns (.CPlayer_SetFavoriteBadge_Response);
	rpc GetProfileCustomization (.NotImplemented) returns (.CPlayer_GetProfileCustomization_Response);
	rpc GetPurchasedProfileCustomizations (.NotImplemented) returns (.CPlayer_GetPurchasedProfileCustomizations_Response);
	rpc GetPurchasedAndUpgradedProfileCustomizations (.CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request) returns (.CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response);
	rpc GetProfileThemesAvailable (.NotImplemented) returns (.CPlayer_GetProfileThemesAvailable_Response);
	rpc SetProfileTheme (.CPlayer_SetProfileTheme_Request) returns (.CPlayer_SetProfileTheme_Response);
	rpc SetProfilePreferences (.NotImplemented) returns (.CPlayer_SetProfilePreferences_Response);
	rpc PostStatusToFriends (.CPlayer_PostStatusToFriends_Request) returns (.CPlayer_PostStatusToFriends_Response);
	rpc GetPostedStatus (.NotImplemented) returns (.CPlayer_GetPostedStatus_Response);
	rpc DeletePostedStatus (.NotImplemented) returns (.CPlayer_DeletePostedStatus_Response);
	rpc ClientGetLastPlayedTimes (.CPlayer_GetLastPlayedTimes_Request) returns (.CPlayer_GetLastPlayedTimes_Response);
	rpc AcceptSSA (.NotImplemented) returns (.CPlayer_AcceptSSA_Response);
	rpc GetNicknameList (.NotImplemented) returns (.CPlayer_GetNicknameList_Response);
	rpc GetPerFriendPreferences (.CPlayer_GetPerFriendPreferences_Request) returns (.CPlayer_GetPerFriendPreferences_Response);
	rpc SetPerFriendPreferences (.CPlayer_SetPerFriendPreferences_Request) returns (.CPlayer_SetPerFriendPreferences_Response);
	rpc AddFriend (.CPlayer_AddFriend_Request) returns (.CPlayer_AddFriend_Response);
	rpc RemoveFriend (.CPlayer_RemoveFriend_Request) returns (.CPlayer_RemoveFriend_Response);
	rpc IgnoreFriend (.CPlayer_IgnoreFriend_Request) returns (.CPlayer_IgnoreFriend_Response);
	rpc GetCommunityPreferences (.CPlayer_GetCommunityPreferences_Request) returns (.CPlayer_GetCommunityPreferences_Response);
	rpc SetCommunityPreferences (.CPlayer_SetCommunityPreferences_Request) returns (.CPlayer_SetCommunityPreferences_Response);
	rpc GetTextFilterWords (.CPlayer_GetTextFilterWords_Request) returns (.CPlayer_GetTextFilterWords_Response);
	rpc GetNewSteamAnnouncementState (.NotImplemented) returns (.CPlayer_GetNewSteamAnnouncementState_Response);
	rpc UpdateSteamAnnouncementLastRead (.NotImplemented) returns (.CPlayer_UpdateSteamAnnouncementLastRead_Response);
	rpc GetPrivacySettings (.CPlayer_GetPrivacySettings_Request) returns (.CPlayer_GetPrivacySettings_Response);
	rpc GetDurationControl (.NotImplemented) returns (.CPlayer_GetDurationControl_Response);
}

service PlayerClient {
	rpc NotifyLastPlayedTimes (.CPlayer_LastPlayedTimes_Notification) returns (.NoResponse);
	rpc NotifyFriendNicknameChanged (.CPlayer_FriendNicknameChanged_Notification) returns (.NoResponse);
	rpc NotifyFriendEquippedProfileItemsChanged (.CPlayer_FriendEquippedProfileItemsChanged_Notification) returns (.NoResponse);
	rpc NotifyNewSteamAnnouncementState (.CPlayer_NewSteamAnnouncementState_Notification) returns (.NoResponse);
	rpc NotifyCommunityPreferencesChanged (.CPlayer_CommunityPreferencesChanged_Notification) returns (.NoResponse);
	rpc NotifyTextFilterWordsChanged (.CPlayer_TextFilterWordsChanged_Notification) returns (.NoResponse);
	rpc NotifyPerFriendPreferencesChanged (.CPlayer_PerFriendPreferencesChanged_Notification) returns (.NoResponse);
	rpc NotifyPrivacyPrivacySettingsChanged (.CPlayer_PrivacySettingsChanged_Notification) returns (.NoResponse);
}

